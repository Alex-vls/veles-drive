version: '3.8'

services:
  # ============================================================================
  # ОСНОВНАЯ ИНФРАСТРУКТУРА
  # ============================================================================
  
  # База данных PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: veles_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=veles_drive
      - POSTGRES_USER=veles_user
      - POSTGRES_PASSWORD=veles_password_2024
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U veles_user -d veles_drive"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - veles_network
    restart: unless-stopped

  # Redis для кэширования и очередей
  redis:
    image: redis:7-alpine
    container_name: veles_redis
    volumes:
      - redis_data:/data
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - veles_network
    restart: unless-stopped

  # ============================================================================
  # BACKEND СЕРВИСЫ
  # ============================================================================
  
  # Основной Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: veles_backend
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
      - uploads_volume:/app/uploads
    environment:
      - DEBUG=False
      - DJANGO_SETTINGS_MODULE=veles_drive.settings
      - DATABASE_URL=postgres://veles_user:veles_password_2024@db:5432/veles_drive
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - ALLOWED_HOSTS=veles-drive.ru,www.veles-drive.ru,localhost,127.0.0.1
      - CORS_ALLOWED_ORIGINS=https://veles-drive.ru,https://www.veles-drive.ru,http://localhost:3000
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHANNEL_ID=${TELEGRAM_CHANNEL_ID}
      - TELEGRAM_CHANNEL_USERNAME=${TELEGRAM_CHANNEL_USERNAME}
      - SENTRY_DSN=${SENTRY_DSN}
      - POSTGRES_DB=veles_drive
      - POSTGRES_USER=veles_user
      - POSTGRES_PASSWORD=veles_password_2024
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - veles_network
    restart: unless-stopped

  # Celery Worker для фоновых задач
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: veles_celery_worker
    command: celery -A veles_drive worker -l INFO --concurrency=4
    volumes:
      - ./backend:/app
      - media_volume:/app/mediafiles
      - uploads_volume:/app/uploads
    environment:
      - DJANGO_SETTINGS_MODULE=veles_drive.settings
      - DATABASE_URL=postgres://veles_user:veles_password_2024@db:5432/veles_drive
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - backend
      - redis
    networks:
      - veles_network
    restart: unless-stopped

  # Celery Beat для планировщика задач
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: veles_celery_beat
    command: celery -A veles_drive beat -l INFO
    volumes:
      - ./backend:/app
    environment:
      - DJANGO_SETTINGS_MODULE=veles_drive.settings
      - DATABASE_URL=postgres://veles_user:veles_password_2024@db:5432/veles_drive
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - backend
      - redis
    networks:
      - veles_network
    restart: unless-stopped

  # ============================================================================
  # FRONTEND СЕРВИСЫ
  # ============================================================================
  
  # Основной Frontend (сайт агрегатора)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: veles_frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=https://api.veles-drive.ru
      - REACT_APP_WS_URL=wss://api.veles-drive.ru
      - REACT_APP_DOMAIN=veles-drive.ru
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - veles_network
    restart: unless-stopped

  # Telegram Mini App Frontend (для агрегатора)
  tg_frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.tg
    container_name: veles_tg_frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=https://api.veles-drive.ru
      - REACT_APP_WS_URL=wss://api.veles-drive.ru
      - REACT_APP_TELEGRAM_MODE=true
      - REACT_APP_DOMAIN=tg.veles-drive.ru
    ports:
      - "3001:3000"
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - veles_network
    restart: unless-stopped

  # Telegram Mini App Frontend (для админки + ERP)
  tg_admin_frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.admin
    container_name: veles_tg_admin_frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=https://api.veles-drive.ru
      - REACT_APP_WS_URL=wss://api.veles-drive.ru
      - REACT_APP_TELEGRAM_MODE=true
      - REACT_APP_ADMIN_MODE=true
      - REACT_APP_DOMAIN=admin.veles-drive.ru
    ports:
      - "3002:3000"
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - veles_network
    restart: unless-stopped

  # ============================================================================
  # МОНИТОРИНГ И ЛОГИРОВАНИЕ
  # ============================================================================
  
  # Prometheus для метрик
  prometheus:
    image: prom/prometheus:latest
    container_name: veles_prometheus
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./docker/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - veles_network
    restart: unless-stopped

  # AlertManager для уведомлений
  alertmanager:
    image: prom/alertmanager:latest
    container_name: veles_alertmanager
    volumes:
      - ./docker/prometheus/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    ports:
      - "9093:9093"
    networks:
      - veles_network
    restart: unless-stopped

  # Grafana для визуализации
  grafana:
    image: grafana/grafana:latest
    container_name: veles_grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=veles_admin_2024
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3003:3000"
    networks:
      - veles_network
    restart: unless-stopped

  # ============================================================================
  # ПРОКСИ И БЕЗОПАСНОСТЬ
  # ============================================================================
  
  # Nginx как reverse proxy
  nginx:
    image: nginx:alpine
    container_name: veles_nginx
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
      - uploads_volume:/app/uploads
      - ./docker/nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
      - tg_frontend
      - tg_admin_frontend
    networks:
      - veles_network
    restart: unless-stopped

  # Certbot для SSL сертификатов
  certbot:
    image: certbot/certbot
    container_name: veles_certbot
    volumes:
      - ./docker/nginx/ssl:/etc/letsencrypt
      - ./docker/nginx/www:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email admin@veles-drive.ru --agree-tos --no-eff-email -d veles-drive.ru -d www.veles-drive.ru -d api.veles-drive.ru -d tg.veles-drive.ru -d admin.veles-drive.ru
    networks:
      - veles_network

  # ============================================================================
  # ХРАНИЛИЩЕ ФАЙЛОВ
  # ============================================================================
  
  # MinIO для собственного хранилища файлов
  minio:
    image: minio/minio:latest
    container_name: veles_minio
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=veles_minio_user
      - MINIO_ROOT_PASSWORD=veles_minio_password_2024
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - veles_network
    restart: unless-stopped

  # MinIO Client для управления
  minio_client:
    image: minio/mc:latest
    container_name: veles_minio_client
    volumes:
      - ./docker/minio/scripts:/scripts
    environment:
      - MINIO_ROOT_USER=veles_minio_user
      - MINIO_ROOT_PASSWORD=veles_minio_password_2024
    command: sh -c "sleep 10 && /scripts/setup-minio.sh"
    depends_on:
      - minio
    networks:
      - veles_network

# ============================================================================
# VOLUMES
# ============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  uploads_volume:
    driver: local
  prometheus_data:
    driver: local
  alertmanager_data:
    driver: local
  grafana_data:
    driver: local
  minio_data:
    driver: local

# ============================================================================
# NETWORKS
# ============================================================================
networks:
  veles_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 