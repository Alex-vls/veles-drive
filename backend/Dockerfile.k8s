# Используем nginx:alpine как базовый образ
FROM nginx:alpine

# Устанавливаем Python и необходимые зависимости
RUN apk add --no-cache \
    python3 \
    py3-pip \
    postgresql-dev \
    gcc \
    musl-dev \
    curl \
    wget \
    git \
    python3-dev \
    linux-headers

# Создаем пользователя для безопасности
RUN adduser -D -s /bin/sh veles

# Устанавливаем рабочую директорию
WORKDIR /app

# Копируем файлы зависимостей
COPY requirements.txt pyproject.toml ./

# Устанавливаем Python зависимости
RUN pip3 install --no-cache-dir --upgrade pip --break-system-packages && \
    pip3 install --no-cache-dir -r requirements.txt --break-system-packages

# Копируем код приложения
COPY . .

# Создаем необходимые директории
RUN mkdir -p /app/staticfiles /app/mediafiles /app/uploads /app/logs

# Устанавливаем права доступа
RUN chown -R veles:veles /app

# Создаем health check endpoint
RUN echo 'from django.http import HttpResponse\n\
def health_check(request):\n\
    return HttpResponse("ok", content_type="text/plain")' > /app/health_check.py

# Создаем nginx конфигурацию для Django
RUN echo 'server {\n\
    listen 80;\n\
    server_name _;\n\
    \n\
    location / {\n\
        proxy_pass http://127.0.0.1:8000;\n\
        proxy_set_header Host $host;\n\
        proxy_set_header X-Real-IP $remote_addr;\n\
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\
        proxy_set_header X-Forwarded-Proto $scheme;\n\
    }\n\
    \n\
    location /static/ {\n\
        alias /app/staticfiles/;\n\
        expires 30d;\n\
        add_header Cache-Control "public, immutable";\n\
    }\n\
    \n\
    location /media/ {\n\
        alias /app/mediafiles/;\n\
        expires 30d;\n\
        add_header Cache-Control "public, immutable";\n\
    }\n\
}' > /etc/nginx/conf.d/default.conf

# Создаем скрипт запуска
RUN echo '#!/bin/sh\n\
echo "Starting Django application..."\n\
cd /app\n\
echo "Waiting for database..."\n\
sleep 10\n\
echo "Running migrations..."\n\
python3 manage.py migrate --noinput\n\
echo "Collecting static files..."\n\
python3 manage.py collectstatic --noinput\n\
echo "Starting Gunicorn..."\n\
exec gunicorn --bind 0.0.0.0:80 --workers 4 --timeout 120 --keep-alive 5 veles_drive.wsgi:application' > /start.sh

RUN chmod +x /start.sh

# Открываем порт
EXPOSE 80

# Запускаем приложение
ENTRYPOINT ["/bin/sh", "/start.sh"]
