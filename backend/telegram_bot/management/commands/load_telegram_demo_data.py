from django.core.management.base import BaseCommand
from django.contrib.auth.models import User
from django.utils import timezone
from telegram_bot.models import (
    TelegramBotSettings, TelegramUser, TelegramChat, TelegramCommand,
    TelegramInlineKeyboard, TelegramNotification
)
from telegram_bot.services import TelegramKeyboardService


class Command(BaseCommand):
    help = '–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è Telegram –±–æ—Ç–∞'

    def handle(self, *args, **options):
        self.stdout.write('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö –¥–ª—è Telegram –±–æ—Ç–∞...')
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
        self.create_bot_settings()
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        self.create_bot_commands()
        
        # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        self.create_inline_keyboards()
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Telegram –ø—Ä–æ—Ñ–∏–ª—è–º–∏
        self.create_demo_telegram_users()
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-—á–∞—Ç—ã
        self.create_demo_chats()
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self.create_demo_notifications()
        
        self.stdout.write(
            self.style.SUCCESS('–î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è Telegram –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!')
        )

    def create_bot_settings(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞"""
        bot_settings, created = TelegramBotSettings.objects.get_or_create(
            bot_username='veles_drive_bot',
            defaults={
                'bot_token': '1234567890:ABCdefGHIjklMNOpqrsTUVwxyz',  # –î–µ–º–æ —Ç–æ–∫–µ–Ω
                'webhook_url': 'https://api.veles-auto.com/telegram/webhook/',
                'is_active': True
            }
        )
        
        if created:
            self.stdout.write(f'–°–æ–∑–¥–∞–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞: {bot_settings.bot_username}')
        else:
            self.stdout.write(f'–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç: {bot_settings.bot_username}')

    def create_bot_commands(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        commands_data = [
            {
                'command': 'start',
                'description': '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                'handler_function': 'handle_start_command'
            },
            {
                'command': 'help',
                'description': '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º',
                'handler_function': 'handle_help_command'
            },
            {
                'command': 'projects',
                'description': '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤',
                'handler_function': 'show_projects'
            },
            {
                'command': 'sales',
                'description': '–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–¥–∞–∂–∏',
                'handler_function': 'show_sales'
            },
            {
                'command': 'cars',
                'description': '–ü–æ–∫–∞–∑–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª–∏',
                'handler_function': 'show_cars'
            },
            {
                'command': 'companies',
                'description': '–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏',
                'handler_function': 'show_companies'
            },
            {
                'command': 'analytics',
                'description': '–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É',
                'handler_function': 'show_analytics'
            },
            {
                'command': 'settings',
                'description': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                'handler_function': 'show_settings'
            }
        ]
        
        for cmd_data in commands_data:
            command, created = TelegramCommand.objects.get_or_create(
                command=cmd_data['command'],
                defaults={
                    'description': cmd_data['description'],
                    'handler_function': cmd_data['handler_function'],
                    'is_active': True
                }
            )
            
            if created:
                self.stdout.write(f'–°–æ–∑–¥–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: /{command.command}')
            else:
                self.stdout.write(f'–ö–æ–º–∞–Ω–¥–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: /{command.command}')

    def create_inline_keyboards(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
        keyboards_data = [
            {
                'name': 'main_menu',
                'description': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞',
                'keyboard_data': TelegramKeyboardService.create_main_menu_keyboard()
            },
            {
                'name': 'project_actions',
                'description': '–î–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏',
                'keyboard_data': {
                    'inline_keyboard': [
                        [
                            {'text': 'üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤', 'callback_data': 'projects'},
                            {'text': '‚ûï –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç', 'callback_data': 'new_project'}
                        ],
                        [
                            {'text': 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'callback_data': 'project_stats'},
                            {'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'main_menu'}
                        ]
                    ]
                }
            },
            {
                'name': 'task_actions',
                'description': '–î–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–¥–∞—á–∞–º–∏',
                'keyboard_data': {
                    'inline_keyboard': [
                        [
                            {'text': 'üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É', 'callback_data': 'new_task'},
                            {'text': '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å', 'callback_data': 'complete_task'}
                        ],
                        [
                            {'text': 'üìÖ –°—Ä–æ–∫–∏', 'callback_data': 'task_deadlines'},
                            {'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'projects'}
                        ]
                    ]
                }
            },
            {
                'name': 'sales_actions',
                'description': '–î–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏',
                'keyboard_data': {
                    'inline_keyboard': [
                        [
                            {'text': 'üí∞ –ù–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞', 'callback_data': 'new_sale'},
                            {'text': 'üìä –û—Ç—á–µ—Ç—ã', 'callback_data': 'sales_reports'}
                        ],
                        [
                            {'text': 'üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞', 'callback_data': 'sales_analytics'},
                            {'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'main_menu'}
                        ]
                    ]
                }
            }
        ]
        
        for kb_data in keyboards_data:
            keyboard, created = TelegramInlineKeyboard.objects.get_or_create(
                name=kb_data['name'],
                defaults={
                    'description': kb_data['description'],
                    'keyboard_data': kb_data['keyboard_data'],
                    'is_active': True
                }
            )
            
            if created:
                self.stdout.write(f'–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {keyboard.name}')
            else:
                self.stdout.write(f'–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {keyboard.name}')

    def create_demo_telegram_users(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Telegram –ø—Ä–æ—Ñ–∏–ª—è–º–∏"""
        demo_users = [
            {
                'username': 'demo_manager',
                'email': 'manager@veles-auto.com',
                'first_name': '–ú–µ–Ω–µ–¥–∂–µ—Ä',
                'last_name': '–î–µ–º–æ',
                'telegram_id': 123456789,
                'telegram_username': 'demo_manager',
                'telegram_first_name': '–ú–µ–Ω–µ–¥–∂–µ—Ä',
                'telegram_last_name': '–î–µ–º–æ'
            },
            {
                'username': 'demo_sales',
                'email': 'sales@veles-auto.com',
                'first_name': '–ü—Ä–æ–¥–∞–≤–µ—Ü',
                'last_name': '–î–µ–º–æ',
                'telegram_id': 987654321,
                'telegram_username': 'demo_sales',
                'telegram_first_name': '–ü—Ä–æ–¥–∞–≤–µ—Ü',
                'telegram_last_name': '–î–µ–º–æ'
            },
            {
                'username': 'demo_developer',
                'email': 'dev@veles-auto.com',
                'first_name': '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
                'last_name': '–î–µ–º–æ',
                'telegram_id': 555666777,
                'telegram_username': 'demo_dev',
                'telegram_first_name': '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
                'telegram_last_name': '–î–µ–º–æ'
            },
            {
                'username': 'demo_customer',
                'email': 'customer@example.com',
                'first_name': '–ö–ª–∏–µ–Ω—Ç',
                'last_name': '–î–µ–º–æ',
                'telegram_id': 111222333,
                'telegram_username': 'demo_customer',
                'telegram_first_name': '–ö–ª–∏–µ–Ω—Ç',
                'telegram_last_name': '–î–µ–º–æ'
            }
        ]
        
        for user_data in demo_users:
            # –°–æ–∑–¥–∞–µ–º Django –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            django_user, created = User.objects.get_or_create(
                username=user_data['username'],
                defaults={
                    'email': user_data['email'],
                    'first_name': user_data['first_name'],
                    'last_name': user_data['last_name'],
                    'is_active': True
                }
            )
            
            # –°–æ–∑–¥–∞–µ–º Telegram –ø—Ä–æ—Ñ–∏–ª—å
            telegram_user, created = TelegramUser.objects.get_or_create(
                telegram_id=user_data['telegram_id'],
                defaults={
                    'user': django_user,
                    'username': user_data['telegram_username'],
                    'first_name': user_data['telegram_first_name'],
                    'last_name': user_data['telegram_last_name'],
                    'language_code': 'ru',
                    'is_active': True
                }
            )
            
            if created:
                self.stdout.write(f'–°–æ–∑–¥–∞–Ω Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_user.user.username}')
            else:
                self.stdout.write(f'Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {telegram_user.user.username}')

    def create_demo_chats(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-—á–∞—Ç–æ–≤"""
        demo_chats = [
            {
                'chat_id': -1001234567890,
                'chat_type': 'supergroup',
                'title': 'VELES AUTO - –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã',
                'username': 'veles_drive_general'
            },
            {
                'chat_id': -1009876543210,
                'chat_type': 'supergroup',
                'title': 'VELES AUTO - –ü—Ä–æ–¥–∞–∂–∏',
                'username': 'veles_drive_sales'
            },
            {
                'chat_id': -1005556667770,
                'chat_type': 'supergroup',
                'title': 'VELES AUTO - –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
                'username': 'veles_drive_dev'
            },
            {
                'chat_id': 123456789,
                'chat_type': 'private',
                'title': None,
                'username': 'demo_manager'
            }
        ]
        
        for chat_data in demo_chats:
            chat, created = TelegramChat.objects.get_or_create(
                chat_id=chat_data['chat_id'],
                defaults={
                    'chat_type': chat_data['chat_type'],
                    'title': chat_data['title'],
                    'username': chat_data['username'],
                    'is_active': True
                }
            )
            
            if created:
                self.stdout.write(f'–°–æ–∑–¥–∞–Ω —á–∞—Ç: {chat.title or chat.chat_id}')
            else:
                self.stdout.write(f'–ß–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {chat.title or chat.chat_id}')

    def create_demo_notifications(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        demo_users = TelegramUser.objects.filter(is_active=True)[:3]
        
        if not demo_users.exists():
            self.stdout.write('–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')
            return
        
        demo_notifications = [
            {
                'notification_type': 'task_assigned',
                'title': 'üìã –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞',
                'message': '–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞: <b>–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞</b>\n\n'
                          '–ü—Ä–æ–µ–∫—Ç: VELES AUTO Platform\n'
                          '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –í—ã—Å–æ–∫–∏–π\n'
                          '–°—Ä–æ–∫: 15.12.2024'
            },
            {
                'notification_type': 'sale_created',
                'title': 'üí∞ –ù–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞',
                'message': '–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞: <b>Toyota Camry 2023</b>\n\n'
                          '–°—É–º–º–∞: 2,500,000 ‚ÇΩ\n'
                          '–ö–æ–º–ø–∞–Ω–∏—è: VELES AUTO\n'
                          '–ö–ª–∏–µ–Ω—Ç: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤'
            },
            {
                'notification_type': 'project_update',
                'title': 'üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞',
                'message': '–ü—Ä–æ–µ–∫—Ç <b>VELES AUTO Platform</b> –æ–±–Ω–æ–≤–ª–µ–Ω\n\n'
                          '–ü—Ä–æ–≥—Ä–µ—Å—Å: 75%\n'
                          '–ó–∞–¥–∞—á: 24\n'
                          '–ó–∞–≤–µ—Ä—à–µ–Ω–æ: 18'
            },
            {
                'notification_type': 'system_alert',
                'title': '‚ö†Ô∏è –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
                'message': '–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —Å 02:00 –¥–æ 04:00 –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç.'
            },
            {
                'notification_type': 'reminder',
                'title': '‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
                'message': '–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –≤—Å—Ç—Ä–µ—á–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∑–∞–≤—Ç—Ä–∞ –≤ 14:00.'
            }
        ]
        
        for i, notification_data in enumerate(demo_notifications):
            user = demo_users[i % len(demo_users)]
            
            notification, created = TelegramNotification.objects.get_or_create(
                user=user,
                title=notification_data['title'],
                defaults={
                    'notification_type': notification_data['notification_type'],
                    'message': notification_data['message'],
                    'is_sent': False,
                    'data': {
                        'demo': True,
                        'created_at': timezone.now().isoformat()
                    }
                }
            )
            
            if created:
                self.stdout.write(f'–°–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {notification.title}')
            else:
                self.stdout.write(f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {notification.title}') 