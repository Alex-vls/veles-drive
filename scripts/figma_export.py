#!/usr/bin/env python3
"""
Figma API Export Script
–≠–∫—Å–ø–æ—Ä—Ç –¥–∏–∑–∞–π–Ω–∞ –∏–∑ Figma –≤ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
"""

import requests
import json
import os
import sys
from pathlib import Path
from typing import Dict, List, Any
import time

class FigmaExporter:
    def __init__(self, access_token: str):
        self.access_token = access_token
        self.base_url = "https://api.figma.com/v1"
        self.headers = {
            "X-Figma-Token": access_token,
            "Content-Type": "application/json"
        }
        
    def get_user_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        try:
            response = requests.get(f"{self.base_url}/me", headers=self.headers)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
            return {}
    
    def get_files(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            response = requests.get(f"{self.base_url}/me/files", headers=self.headers)
            response.raise_for_status()
            return response.json().get("files", [])
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}")
            return []
    
    def get_file_info(self, file_key: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ"""
        try:
            response = requests.get(f"{self.base_url}/files/{file_key}", headers=self.headers)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ {file_key}: {e}")
            return {}
    
    def get_image_urls(self, file_key: str, node_ids: List[str], format: str = "png", scale: int = 2) -> Dict[str, str]:
        """–ü–æ–ª—É—á–∏—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        try:
            params = {
                "ids": ",".join(node_ids),
                "format": format,
                "scale": scale
            }
            response = requests.get(f"{self.base_url}/images/{file_key}", headers=self.headers, params=params)
            response.raise_for_status()
            return response.json().get("images", {})
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
            return {}
    
    def download_image(self, url: str, filepath: str) -> bool:
        """–°–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL"""
        try:
            response = requests.get(url, stream=True)
            response.raise_for_status()
            
            with open(filepath, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    f.write(chunk)
            return True
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {url}: {e}")
            return False
    
    def extract_nodes(self, node: Dict[str, Any], nodes: List[Dict[str, Any]]) -> None:
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏–∑–≤–ª–µ—á—å –≤—Å–µ —É–∑–ª—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        if node.get("type") in ["FRAME", "COMPONENT", "INSTANCE", "GROUP"]:
            nodes.append(node)
        
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        for child in node.get("children", []):
            self.extract_nodes(child, nodes)
    
    def sanitize_filename(self, filename: str) -> str:
        """–û—á–∏—Å—Ç–∏—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        invalid_chars = '<>:"/\\|?*'
        for char in invalid_chars:
            filename = filename.replace(char, '_')
        return filename.strip()
    
    def export_file(self, file_key: str, output_dir: str = "./figma-export") -> bool:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª Figma"""
        print(f"üîÑ –≠–∫—Å–ø–æ—Ä—Ç —Ñ–∞–π–ª–∞ {file_key}...")
        
        # –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file_info = self.get_file_info(file_key)
        if not file_info:
            return False
        
        # –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
        base_dir = Path(output_dir)
        base_dir.mkdir(exist_ok=True)
        
        (base_dir / "pages").mkdir(exist_ok=True)
        (base_dir / "components").mkdir(exist_ok=True)
        (base_dir / "icons").mkdir(exist_ok=True)
        (base_dir / "images").mkdir(exist_ok=True)
        (base_dir / "styles").mkdir(exist_ok=True)
        
        # –ò–∑–≤–ª–µ—á—å –≤—Å–µ —É–∑–ª—ã
        nodes = []
        document = file_info.get("document", {})
        self.extract_nodes(document, nodes)
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(nodes)} —É–∑–ª–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —É–∑–ª—ã
        exported_count = 0
        for i, node in enumerate(nodes):
            node_id = node.get("id")
            node_name = node.get("name", f"node_{i}")
            node_type = node.get("type", "unknown")
            
            # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–∞–ø–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
            if node_type in ["COMPONENT", "INSTANCE"]:
                folder = "components"
            elif node_type == "FRAME":
                folder = "pages"
            else:
                folder = "images"
            
            # –ü–æ–ª—É—á–∏—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_urls = self.get_image_urls(file_key, [node_id])
            if node_id in image_urls:
                url = image_urls[node_id]
                
                # –°–æ–∑–¥–∞—Ç—å –∏–º—è —Ñ–∞–π–ª–∞
                filename = self.sanitize_filename(f"{node_name}.png")
                filepath = base_dir / folder / filename
                
                # –°–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                if self.download_image(url, str(filepath)):
                    print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: {folder}/{filename}")
                    exported_count += 1
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {node_name}")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
            time.sleep(0.1)
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = {
            "file_key": file_key,
            "file_name": file_info.get("name", "Unknown"),
            "exported_at": time.strftime("%Y-%m-%d %H:%M:%S"),
            "total_nodes": len(nodes),
            "exported_count": exported_count
        }
        
        with open(base_dir / "metadata.json", "w", encoding="utf-8") as f:
            json.dump(metadata, f, indent=2, ensure_ascii=False)
        
        print(f"üéâ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {exported_count} –∏–∑ {len(nodes)} —É–∑–ª–æ–≤")
        return True

def main():
    # –¢–æ–∫–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    access_token = "figd_PW2JpX5EjL9zyApUBnCZ3qzAILJoY1PbPkoeuOpU"
    
    # –°–æ–∑–¥–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä
    exporter = FigmaExporter(access_token)
    
    # –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = exporter.get_user_info()
    if user_info:
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info.get('handle', 'Unknown')}")
        print(f"üìß Email: {user_info.get('email', 'Unknown')}")
    
    # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    files = exporter.get_files()
    if not files:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤")
        return
    
    print(f"\nüìÅ –ù–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤:")
    for i, file_info in enumerate(files):
        print(f"  {i+1}. {file_info.get('name', 'Unknown')} (–∫–ª—é—á: {file_info.get('key', 'Unknown')})")
    
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∫–ª—é—á —Ñ–∞–π–ª–∞ –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
    if len(sys.argv) > 1:
        file_key = sys.argv[1]
        print(f"\nüöÄ –≠–∫—Å–ø–æ—Ä—Ç —Ñ–∞–π–ª–∞ {file_key}...")
        exporter.export_file(file_key)
    else:
        # –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á —Ñ–∞–π–ª–∞):")
        try:
            choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞ –∏–ª–∏ –∫–ª—é—á: ").strip()
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –∫–ª—é—á–æ–º —Ñ–∞–π–ª–∞
            if len(choice) > 10:  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ –∫–ª—é—á —Ñ–∞–π–ª–∞
                file_key = choice
            else:
                # –≠—Ç–æ –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞
                file_index = int(choice) - 1
                if 0 <= file_index < len(files):
                    file_key = files[file_index]["key"]
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞")
                    return
            
            exporter.export_file(file_key)
            
        except (ValueError, KeyboardInterrupt):
            print("\n‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

if __name__ == "__main__":
    main() 