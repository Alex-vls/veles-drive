#!/usr/bin/env python3
"""
Enhanced Design Analysis Script
–ê–Ω–∞–ª–∏–∑ PNG —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–∏–∑–∞–π–Ω–∞, –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ —Å—Ç–∏–ª–µ–π.
"""

import os
import json
from pathlib import Path
from typing import Dict, List, Any
import shutil

class EnhancedDesignAnalyzer:
    def __init__(self, screenshots_dir: str = "screen"):
        self.screenshots_dir = Path(screenshots_dir)
        self.output_dir = Path("design-analysis")
        self.components_dir = self.output_dir / "components"
        self.styles_dir = self.output_dir / "styles"
        
    def setup_directories(self) -> None:
        """–°–æ–∑–¥–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        self.output_dir.mkdir(exist_ok=True)
        self.components_dir.mkdir(exist_ok=True)
        self.styles_dir.mkdir(exist_ok=True)
        print(f"üìÅ –°–æ–∑–¥–∞–Ω—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {self.output_dir}, {self.components_dir}, {self.styles_dir}")

    def analyze_screenshots(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏ —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
        self.setup_directories()

        if not self.screenshots_dir.exists():
            print(f"‚ùå –ü–∞–ø–∫–∞ {self.screenshots_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return {}
        
        png_files = list(self.screenshots_dir.glob("*.png"))
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(png_files)} PNG —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")

        design_analysis = {
            "pages": [],
            "components": {},
            "colors": {},
            "fonts": {},
            "spacing": {},
            "border_radius": {},
            "shadows": {},
            "layout_patterns": {},
            "interactive_elements": {}
        }

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        for png_file in png_files:
            page_name = png_file.stem
            print(f"‚ú® –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∞–π–ª: {png_file.name}")
            
            # –ê–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏ —Ç–∏–ø–∏—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            self.analyze_file_by_name(page_name, png_file, design_analysis)

        self.create_config_files(design_analysis)
        return design_analysis

    def analyze_file_by_name(self, page_name: str, png_file: Path, analysis: Dict[str, Any]) -> None:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –∏–º–µ–Ω–∏"""
        
        # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (image1.png)
        if page_name == "image1":
            analysis["pages"].append({
                "name": "homepage",
                "file": png_file.name,
                "description": "–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å hero-—Å–µ–∫—Ü–∏–µ–π",
                "elements": [
                    {
                        "type": "header",
                        "logo": "–í–ï–õ–ï–° –ê–í–¢–û",
                        "navigation": ["–¢–û–ü-–ü–û–î–ë–û–†–ö–ò", "–ò–ó–ë–†–ê–ù–ù–û–ï", "–û –ù–ê–°", "–û –ü–õ–ê–¢–§–û–†–ú–ï", "–ù–û–í–û–°–¢–ò"],
                        "icons": ["bookmark", "profile"]
                    },
                    {
                        "type": "hero_section",
                        "headline": "–ê–í–¢–û–ú–û–ë–ò–õ–ò, –ö–û–¢–û–†–´–ï –ì–û–í–û–†–Ø–¢ –ó–ê –í–ê–°",
                        "subtext": "–¢–æ–ª—å–∫–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∏–ª–µ—Ä—ã –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω—ã. –ò—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ. –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è",
                        "call_to_action": "–ö–ê–¢–ê–õ–û–ì –ê–í–¢–û–ú–û–ë–ò–õ–ï–ô",
                        "background_image": "luxury_car_silhouette"
                    }
                ]
            })

        # –ö–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ (cards.png)
        elif page_name == "cards":
            analysis["components"]["CarCard"] = {
                "file": png_file.name,
                "description": "–ö–∞—Ä—Ç–æ—á–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏",
                "properties": {
                    "background": "var(--color-background-card)",
                    "border_radius": "var(--border-radius-lg)",
                    "padding": "var(--spacing-md)",
                    "shadow": "var(--shadow-card)",
                    "image_ratio": "16:9",
                    "badge": "–ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï –ù–ï–î–ï–õ–ò",
                    "bookmark_icon": True,
                    "image_slider": True
                }
            }
            analysis["components"]["DealershipCard"] = {
                "file": png_file.name,
                "description": "–ö–∞—Ä—Ç–æ—á–∫–∞ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–∞ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º",
                "properties": {
                    "background": "var(--color-background-card)",
                    "border_radius": "var(--border-radius-lg)",
                    "padding": "var(--spacing-md)",
                    "shadow": "var(--shadow-card)",
                    "rating_stars": 5,
                    "bookmark_icon": True
                }
            }

        # –°—Ç—Ä–∞–Ω–∏—Ü—ã —Å frame –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
        elif "frame" in page_name:
            frame_number = page_name.replace("frame", "")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å—Ç—Ä–∞–Ω–∏—Ü
            if frame_number in ["1", "2", "4", "5", "6"]:
                # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–∞–π—Ç–∞
                page_type = self.get_page_type_by_number(frame_number)
                analysis["pages"].append({
                    "name": f"page_{frame_number}",
                    "file": png_file.name,
                    "description": f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {page_type}",
                    "type": page_type,
                    "elements": self.get_elements_by_page_type(page_type)
                })
            
            elif frame_number in ["10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20"]:
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                component_type = self.get_component_type_by_number(frame_number)
                if component_type:
                    analysis["components"][component_type] = {
                        "file": png_file.name,
                        "description": f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç: {component_type}",
                        "properties": self.get_component_properties(component_type)
                    }

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        elif page_name in ["image2", "image3", "image4"]:
            analysis["pages"].append({
                "name": f"additional_{page_name}",
                "file": png_file.name,
                "description": f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_name}",
                "elements": []
            })

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –¥–∏–∑–∞–π–Ω-—Ç–æ–∫–µ–Ω—ã
        self.add_design_tokens(analysis)

    def get_page_type_by_number(self, frame_number: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ –Ω–æ–º–µ—Ä—É —Ñ—Ä–µ–π–º–∞"""
        page_types = {
            "1": "catalog",
            "2": "car_details", 
            "4": "dealership_list",
            "5": "search_results",
            "6": "favorites"
        }
        return page_types.get(frame_number, "unknown")

    def get_component_type_by_number(self, frame_number: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ñ—Ä–µ–π–º–∞"""
        component_types = {
            "10": "FilterPanel",
            "11": "SearchBar", 
            "12": "Pagination",
            "13": "Breadcrumbs",
            "14": "Modal",
            "15": "Tooltip",
            "16": "Dropdown",
            "17": "Tabs",
            "18": "Accordion",
            "19": "Slider",
            "20": "Gallery"
        }
        return component_types.get(frame_number, None)

    def get_elements_by_page_type(self, page_type: str) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Ç–∏–ø–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        elements_map = {
            "catalog": [
                {"type": "filter_panel", "filters": ["brand", "price", "year", "body_type"]},
                {"type": "car_grid", "layout": "grid", "items_per_row": 3},
                {"type": "pagination", "items_per_page": 12}
            ],
            "car_details": [
                {"type": "car_gallery", "main_image": True, "thumbnails": True},
                {"type": "car_specs", "specifications": ["engine", "transmission", "fuel", "mileage"]},
                {"type": "dealer_info", "contact": True, "rating": True},
                {"type": "action_buttons", "buttons": ["contact", "favorite", "share"]}
            ],
            "dealership_list": [
                {"type": "map_view", "interactive": True},
                {"type": "dealership_cards", "layout": "list"},
                {"type": "filter_panel", "filters": ["location", "rating", "brands"]}
            ]
        }
        return elements_map.get(page_type, [])

    def get_component_properties(self, component_type: str) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        properties_map = {
            "FilterPanel": {
                "background": "var(--color-background-light)",
                "border": "var(--border-light)",
                "padding": "var(--spacing-md)",
                "border_radius": "var(--border-radius-md)"
            },
            "SearchBar": {
                "background": "var(--color-background-light)",
                "border": "var(--border-focus)",
                "border_radius": "var(--border-radius-lg)",
                "padding": "var(--spacing-sm) var(--spacing-md)"
            },
            "Modal": {
                "background": "var(--color-background-modal)",
                "backdrop": "var(--color-backdrop)",
                "border_radius": "var(--border-radius-lg)",
                "shadow": "var(--shadow-modal)"
            }
        }
        return properties_map.get(component_type, {})

    def add_design_tokens(self, analysis: Dict[str, Any]) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –¥–∏–∑–∞–π–Ω-—Ç–æ–∫–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        
        # –¶–≤–µ—Ç–∞ (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã)
        analysis["colors"].update({
            "--color-background-primary": "#000000",
            "--color-background-secondary": "#1a1a1a", 
            "--color-background-card": "#ffffff",
            "--color-background-light": "#f8f9fa",
            "--color-background-modal": "#ffffff",
            "--color-backdrop": "rgba(0, 0, 0, 0.5)",
            "--color-text-primary": "#ffffff",
            "--color-text-secondary": "#6c757d",
            "--color-text-dark": "#000000",
            "--color-accent-primary": "#007AFF",
            "--color-accent-secondary": "#4A47B5",
            "--color-success": "#28a745",
            "--color-warning": "#ffc107",
            "--color-error": "#dc3545",
            "--color-border-light": "#e9ecef",
            "--color-border-focus": "#007AFF"
        })

        # –®—Ä–∏—Ñ—Ç—ã
        analysis["fonts"].update({
            "--font-family-primary": "Inter, -apple-system, BlinkMacSystemFont, sans-serif",
            "--font-family-secondary": "SF Pro Display, sans-serif",
            "--font-size-xs": "12px",
            "--font-size-sm": "14px", 
            "--font-size-base": "16px",
            "--font-size-lg": "18px",
            "--font-size-xl": "20px",
            "--font-size-2xl": "24px",
            "--font-size-3xl": "30px",
            "--font-size-4xl": "36px",
            "--font-size-5xl": "48px",
            "--font-weight-light": "300",
            "--font-weight-normal": "400",
            "--font-weight-medium": "500",
            "--font-weight-semibold": "600",
            "--font-weight-bold": "700"
        })

        # –û—Ç—Å—Ç—É–ø—ã
        analysis["spacing"].update({
            "--spacing-xs": "4px",
            "--spacing-sm": "8px",
            "--spacing-md": "16px",
            "--spacing-lg": "24px",
            "--spacing-xl": "32px",
            "--spacing-2xl": "48px",
            "--spacing-3xl": "64px"
        })

        # –†–∞–¥–∏—É—Å—ã —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è
        analysis["border_radius"].update({
            "--border-radius-sm": "4px",
            "--border-radius-md": "8px",
            "--border-radius-lg": "12px",
            "--border-radius-xl": "16px",
            "--border-radius-full": "50%"
        })

        # –¢–µ–Ω–∏
        analysis["shadows"].update({
            "--shadow-sm": "0 1px 2px rgba(0, 0, 0, 0.05)",
            "--shadow-md": "0 4px 6px rgba(0, 0, 0, 0.1)",
            "--shadow-lg": "0 10px 15px rgba(0, 0, 0, 0.1)",
            "--shadow-xl": "0 20px 25px rgba(0, 0, 0, 0.15)",
            "--shadow-card": "0 4px 12px rgba(0, 0, 0, 0.1)",
            "--shadow-modal": "0 25px 50px rgba(0, 0, 0, 0.25)",
            "--shadow-button": "0 4px 12px rgba(0, 122, 255, 0.3)"
        })

        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –º–∞–∫–µ—Ç–∞
        analysis["layout_patterns"].update({
            "container_max_width": "1200px",
            "grid_columns": 12,
            "breakpoint_mobile": "768px",
            "breakpoint_tablet": "1024px",
            "breakpoint_desktop": "1200px"
        })

        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        analysis["interactive_elements"].update({
            "button_primary": {
                "background": "linear-gradient(135deg, var(--color-accent-primary), var(--color-accent-secondary))",
                "color": "var(--color-text-primary)",
                "padding": "var(--spacing-md) var(--spacing-xl)",
                "border_radius": "var(--border-radius-lg)",
                "font_weight": "var(--font-weight-semibold)",
                "transition": "all 0.2s ease"
            },
            "button_secondary": {
                "background": "transparent",
                "color": "var(--color-text-primary)",
                "border": "1px solid var(--color-text-primary)",
                "padding": "var(--spacing-md) var(--spacing-xl)",
                "border_radius": "var(--border-radius-lg)",
                "font_weight": "var(--font-weight-medium)"
            },
            "input_field": {
                "background": "var(--color-background-light)",
                "border": "1px solid var(--color-border-light)",
                "border_radius": "var(--border-radius-md)",
                "padding": "var(--spacing-sm) var(--spacing-md)",
                "color": "var(--color-text-dark)"
            }
        })

    def create_config_files(self, analysis: Dict[str, Any]) -> None:
        """–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        
        # –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –¥–∏–∑–∞–π–Ω–∞
        with open(self.output_dir / "design-metadata.json", "w", encoding="utf-8") as f:
            json.dump(analysis, f, ensure_ascii=False, indent=2)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {self.output_dir / 'design-metadata.json'}")

        # –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å –¥–∏–∑–∞–π–Ω-—Ç–æ–∫–µ–Ω–∞–º–∏ (CSS Variables)
        css_variables_content = ":root {\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–∏–∑–∞–π–Ω-—Ç–æ–∫–µ–Ω—ã
        for category, values in analysis.items():
            if category in ["colors", "fonts", "spacing", "border_radius", "shadows"]:
                for key, value in values.items():
                    css_variables_content += f"  {key}: {value};\n"
        
        css_variables_content += "}\n"
        
        with open(self.styles_dir / "variables.css", "w", encoding="utf-8") as f:
            f.write(css_variables_content)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {self.styles_dir / 'variables.css'}")

        # –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
        components_content = "/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º—ã */\n\n"
        for component_name, component_data in analysis["components"].items():
            components_content += f"/* {component_name} */\n"
            components_content += f".{component_name.lower()} {{\n"
            for prop, value in component_data.get("properties", {}).items():
                components_content += f"  {prop}: {value};\n"
            components_content += "}\n\n"
        
        with open(self.styles_dir / "components.css", "w", encoding="utf-8") as f:
            f.write(components_content)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {self.styles_dir / 'components.css'}")

        # –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        integration_plan = {
            "status": "ready_for_integration",
            "total_files_analyzed": len(list(self.screenshots_dir.glob("*.png"))),
            "pages_found": len(analysis["pages"]),
            "components_found": len(analysis["components"]),
            "steps": [
                "1. –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å design-tokens/variables.css –≤ –æ—Å–Ω–æ–≤–Ω–æ–π CSS/SCSS —Ñ–∞–π–ª",
                "2. –°–æ–∑–¥–∞—Ç—å React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞",
                "3. –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª–∏ –∏–∑ design-tokens –∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º", 
                "4. –ó–∞–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞ –Ω–æ–≤—ã–µ, —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ",
                "5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –∫—Ä–æ—Å—Å–±—Ä–∞—É–∑–µ—Ä–Ω–æ—Å—Ç—å",
                "6. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã"
            ],
            "estimated_time": "3-4 weeks (35 screenshots analyzed)",
            "pages_to_implement": [page["name"] for page in analysis["pages"]],
            "components_to_implement": list(analysis["components"].keys()),
            "priority_components": [
                "Header", "HeroSection", "CarCard", "FilterPanel", 
                "SearchBar", "Pagination", "Modal", "Button"
            ]
        }
        
        with open(self.output_dir / "integration-plan.json", "w", encoding="utf-8") as f:
            json.dump(integration_plan, f, ensure_ascii=False, indent=2)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {self.output_dir / 'integration-plan.json'}")

        # –°–æ–∑–¥–∞—Ç—å README –¥–ª—è –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º—ã
        readme_content = """# –î–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º–∞ –í–ï–õ–ï–° –ê–í–¢–û

## –û–±–∑–æ—Ä
–ê–Ω–∞–ª–∏–∑ 35 —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–∏–∑–∞–π–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –µ–¥–∏–Ω–æ–π –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º—ã.

## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤
- `design-metadata.json` - –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü
- `variables.css` - CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å –¥–∏–∑–∞–π–Ω-—Ç–æ–∫–µ–Ω–∞–º–∏
- `components.css` - —Å—Ç–∏–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
- `integration-plan.json` - –ø–ª–∞–Ω –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

## –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
- Header —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
- Hero —Å–µ–∫—Ü–∏—è —Å –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é
- –ö–∞—Ä—Ç–æ—á–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π (CarCard)
- –ö–∞—Ä—Ç–æ—á–∫–∏ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–æ–≤ (DealershipCard)
- –ü–∞–Ω–µ–ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
- –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
- –ö–Ω–æ–ø–∫–∏ –∏ —Ñ–æ—Ä–º—ã

## –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
- –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–Ω: #000000 (—á–µ—Ä–Ω—ã–π)
- –í—Ç–æ—Ä–∏—á–Ω—ã–π —Ñ–æ–Ω: #1a1a1a (—Ç–µ–º–Ω–æ-—Å–µ—Ä—ã–π)
- –ö–∞—Ä—Ç–æ—á–∫–∏: #ffffff (–±–µ–ª—ã–π)
- –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç: #ffffff (–±–µ–ª—ã–π)
- –ê–∫—Ü–µ–Ω—Ç: #007AFF (—Å–∏–Ω–∏–π)

## –®—Ä–∏—Ñ—Ç—ã
- –û—Å–Ω–æ–≤–Ω–æ–π: Inter, sans-serif
- –†–∞–∑–º–µ—Ä—ã: –æ—Ç 12px –¥–æ 48px
- –í–µ—Å–∞: –æ—Ç 300 –¥–æ 700

## –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ `variables.css` –≤ –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π CSS —Ñ–∞–π–ª
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
3. –°–ª–µ–¥—É–π—Ç–µ –ø–ª–∞–Ω—É –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è
"""
        
        with open(self.output_dir / "README.md", "w", encoding="utf-8") as f:
            f.write(readme_content)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {self.output_dir / 'README.md'}")

    def run(self) -> None:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∑–∞–π–Ω–∞...")
        print(f"üìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–∞–ø–∫—É: {self.screenshots_dir}")
        
        analysis = self.analyze_screenshots()
        
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {len(analysis['pages'])}")
        print(f"üß© –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {len(analysis['components'])}")
        print(f"üé® –°–æ–∑–¥–∞–Ω–æ –¥–∏–∑–∞–π–Ω-—Ç–æ–∫–µ–Ω–æ–≤: {len(analysis['colors']) + len(analysis['fonts']) + len(analysis['spacing'])}")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {self.output_dir}")

if __name__ == "__main__":
    analyzer = EnhancedDesignAnalyzer()
    analyzer.run() 