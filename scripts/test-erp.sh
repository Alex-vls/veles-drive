#!/bin/bash

echo "üß™ VELES AUTO - –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ERP –ú–û–î–£–õ–ï–ô"
echo "========================================"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
check_service() {
    local service_name=$1
    local url=$2
    local expected_status=$3
    
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ $service_name..."
    
    if curl -f -s "$url" >/dev/null 2>&1; then
        log_success "$service_name –¥–æ—Å—Ç—É–ø–µ–Ω"
        return 0
    else
        log_error "$service_name –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints
test_api_endpoint() {
    local endpoint_name=$1
    local url=$2
    local method=${3:-GET}
    local data=${4:-""}
    
    log_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ $endpoint_name..."
    
    if [ "$method" = "GET" ]; then
        response=$(curl -s -w "%{http_code}" "$url" -o /tmp/response.json)
    else
        response=$(curl -s -w "%{http_code}" -X "$method" -H "Content-Type: application/json" -d "$data" "$url" -o /tmp/response.json)
    fi
    
    if [ "$response" = "200" ] || [ "$response" = "201" ]; then
        log_success "$endpoint_name —Ä–∞–±–æ—Ç–∞–µ—Ç (HTTP $response)"
        return 0
    else
        log_error "$endpoint_name –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (HTTP $response)"
        return 1
    fi
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ERP –º–æ–¥—É–ª–µ–π
test_erp_modules() {
    log_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ERP –º–æ–¥—É–ª–µ–π..."
    
    # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    check_service "Health Check" "http://localhost:8000/health/"
    check_service "API Status" "http://localhost:8000/api/status/"
    check_service "System Info" "http://localhost:8000/api/system/"
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö API endpoints
    test_api_endpoint "Cars API" "http://localhost:8000/api/cars/"
    test_api_endpoint "Companies API" "http://localhost:8000/api/companies/"
    test_api_endpoint "Users API" "http://localhost:8000/api/users/"
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ERP endpoints
    test_api_endpoint "Inventory API" "http://localhost:8000/api/erp/inventory/"
    test_api_endpoint "Sales API" "http://localhost:8000/api/erp/sales/"
    test_api_endpoint "Services API" "http://localhost:8000/api/erp/services/"
    test_api_endpoint "Service Orders API" "http://localhost:8000/api/erp/service-orders/"
    test_api_endpoint "Financial API" "http://localhost:8000/api/erp/financial/"
    test_api_endpoint "Project Boards API" "http://localhost:8000/api/erp/project-boards/"
    test_api_endpoint "Project Tasks API" "http://localhost:8000/api/erp/project-tasks/"
    test_api_endpoint "Dashboard API" "http://localhost:8000/api/erp/dashboard/"
    test_api_endpoint "Reports API" "http://localhost:8000/api/erp/reports/"
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
test_database() {
    log_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
    if docker-compose exec -T db pg_isready -U veles_user -d veles_auto >/dev/null 2>&1; then
        log_success "PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ"
    else
        log_error "PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü ERP
    tables=("erp_inventory" "erp_sale" "erp_service" "erp_serviceorder" "erp_financial" "erp_projectboard" "erp_projecttask")
    
    for table in "${tables[@]}"; do
        if docker-compose exec -T db psql -U veles_user -d veles_auto -c "SELECT 1 FROM $table LIMIT 1;" >/dev/null 2>&1; then
            log_success "–¢–∞–±–ª–∏—Ü–∞ $table —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        else
            log_warning "–¢–∞–±–ª–∏—Ü–∞ $table –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞"
        fi
    done
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis
test_redis() {
    log_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis..."
    
    if docker-compose exec -T redis redis-cli ping >/dev/null 2>&1; then
        log_success "Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ"
    else
        log_error "Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å"
        return 1
    fi
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Celery
test_celery() {
    log_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Celery..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Celery worker
    if docker-compose exec -T backend celery -A veles_auto inspect active >/dev/null 2>&1; then
        log_success "Celery worker –∞–∫—Ç–∏–≤–µ–Ω"
    else
        log_warning "Celery worker –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Celery beat
    if docker-compose ps celery_beat | grep -q "Up"; then
        log_success "Celery beat –∑–∞–ø—É—â–µ–Ω"
    else
        log_warning "Celery beat –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    fi
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ frontend
test_frontend() {
    log_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Frontend..."
    
    check_service "Frontend" "http://localhost:3000"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    pages=("" "/inventory" "/sales" "/service" "/finance" "/projects" "/admin")
    
    for page in "${pages[@]}"; do
        if curl -f -s "http://localhost:3000$page" >/dev/null 2>&1; then
            log_success "–°—Ç—Ä–∞–Ω–∏—Ü–∞ $page –¥–æ—Å—Ç—É–ø–Ω–∞"
        else
            log_warning "–°—Ç—Ä–∞–Ω–∏—Ü–∞ $page –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        fi
    done
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
test_monitoring() {
    log_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
    
    check_service "Prometheus" "http://localhost:9090"
    check_service "Grafana" "http://localhost:3003"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫ Prometheus
    if curl -s "http://localhost:9090/api/v1/query?query=up" | grep -q "result"; then
        log_success "Prometheus –º–µ—Ç—Ä–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã"
    else
        log_warning "Prometheus –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
create_test_data() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö..."
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
    company_data='{"name": "Test Auto Company", "description": "Test company for ERP testing", "address": "Test Address", "phone": "+1234567890", "email": "test@company.com"}'
    
    if curl -s -X POST -H "Content-Type: application/json" -d "$company_data" "http://localhost:8000/api/companies/" >/dev/null 2>&1; then
        log_success "–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞"
    else
        log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é"
    fi
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    car_data='{"brand": "Test Brand", "model": "Test Model", "year": 2023, "price": 50000, "description": "Test car for ERP testing"}'
    
    if curl -s -X POST -H "Content-Type: application/json" -d "$car_data" "http://localhost:8000/api/cars/" >/dev/null 2>&1; then
        log_success "–¢–µ—Å—Ç–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å–æ–∑–¥–∞–Ω"
    else
        log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
main() {
    log_info "–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ERP —Å–∏—Å—Ç–µ–º—ã..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
    test_erp_modules
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    test_database
    test_redis
    test_celery
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ frontend
    test_frontend
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    test_monitoring
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    create_test_data
    
    echo ""
    echo "üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ERP –ú–û–î–£–õ–ï–ô –ó–ê–í–ï–†–®–ï–ù–û!"
    echo "======================================"
    echo ""
    echo "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
    echo "  - Backend API: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"
    echo "  - Frontend: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"
    echo "  - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"
    echo "  - Redis: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"
    echo "  - Celery: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"
    echo "  - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"
    echo ""
    echo "üîó –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
    echo "  - Frontend: http://localhost:3000"
    echo "  - Backend API: http://localhost:8000"
    echo "  - Admin Panel: http://localhost:8000/admin/"
    echo "  - Grafana: http://localhost:3003"
    echo "  - Prometheus: http://localhost:9090"
    echo ""
    echo "‚úÖ ERP —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!"
}

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
main 