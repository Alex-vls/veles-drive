#!/usr/bin/env python3
"""
Design Analysis Script
–ê–Ω–∞–ª–∏–∑ PNG —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–∏–∑–∞–π–Ω–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
"""

import os
import json
from pathlib import Path
from typing import Dict, List, Any
import shutil

class DesignAnalyzer:
    def __init__(self, screenshots_dir: str = "screen"):
        self.screenshots_dir = Path(screenshots_dir)
        self.output_dir = Path("design-analysis")
        
    def analyze_screenshots(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏ —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
        if not self.screenshots_dir.exists():
            print(f"‚ùå –ü–∞–ø–∫–∞ {self.screenshots_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return {}
        
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ PNG —Ñ–∞–π–ª—ã
        png_files = list(self.screenshots_dir.glob("*.png"))
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(png_files)} PNG —Ñ–∞–π–ª–æ–≤")
        
        # –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∞–Ω–∞–ª–∏–∑–∞
        analysis = {
            "total_files": len(png_files),
            "categories": {
                "pages": [],
                "components": [],
                "cards": [],
                "images": [],
                "frames": []
            },
            "file_sizes": {},
            "recommendations": []
        }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        for file_path in png_files:
            file_name = file_path.name
            file_size = file_path.stat().st_size
            
            analysis["file_sizes"][file_name] = file_size
            
            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã
            if file_name.startswith("frame"):
                analysis["categories"]["frames"].append({
                    "name": file_name,
                    "size": file_size,
                    "type": "frame"
                })
            elif file_name.startswith("cards"):
                analysis["categories"]["cards"].append({
                    "name": file_name,
                    "size": file_size,
                    "type": "component"
                })
            elif file_name.startswith("image"):
                analysis["categories"]["images"].append({
                    "name": file_name,
                    "size": file_size,
                    "type": "image"
                })
            else:
                analysis["categories"]["pages"].append({
                    "name": file_name,
                    "size": file_size,
                    "type": "page"
                })
        
        return analysis
    
    def create_project_structure(self, analysis: Dict[str, Any]) -> None:
        """–°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        # –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫–∏
        project_dirs = [
            "frontend/src/components/design",
            "frontend/src/pages/design",
            "frontend/src/assets/design",
            "frontend/src/styles/design-tokens"
        ]
        
        for dir_path in project_dirs:
            Path(dir_path).mkdir(parents=True, exist_ok=True)
        
        # –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞–ø–∫–∏
        self.copy_files_to_structure(analysis)
        
        # –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.create_config_files(analysis)
        
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞!")
    
    def copy_files_to_structure(self, analysis: Dict[str, Any]) -> None:
        """–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞"""
        # –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ—Ä–µ–π–º—ã (—Å—Ç—Ä–∞–Ω–∏—Ü—ã)
        for frame in analysis["categories"]["frames"]:
            src = self.screenshots_dir / frame["name"]
            dst = Path("frontend/src/pages/design") / frame["name"]
            shutil.copy2(src, dst)
            print(f"üìÑ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Ñ—Ä–µ–π–º: {frame['name']}")
        
        # –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ (–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã)
        for card in analysis["categories"]["cards"]:
            src = self.screenshots_dir / card["name"]
            dst = Path("frontend/src/components/design") / card["name"]
            shutil.copy2(src, dst)
            print(f"üé¥ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞: {card['name']}")
        
        # –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for image in analysis["categories"]["images"]:
            src = self.screenshots_dir / image["name"]
            dst = Path("frontend/src/assets/design") / image["name"]
            shutil.copy2(src, dst)
            print(f"üñºÔ∏è –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image['name']}")
    
    def create_config_files(self, analysis: Dict[str, Any]) -> None:
        """–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        
        # –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É design-analysis
        Path("design-analysis").mkdir(exist_ok=True)
        
        # –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –¥–∏–∑–∞–π–Ω–∞
        metadata = {
            "design_analysis": analysis,
            "total_files": analysis["total_files"],
            "categories": {
                "pages": len(analysis["categories"]["frames"]),
                "components": len(analysis["categories"]["cards"]),
                "images": len(analysis["categories"]["images"])
            },
            "recommendations": [
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—Ä–µ–π–º—ã –∫–∞–∫ –º–∞–∫–µ—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü",
                "–ö–∞—Ä—Ç–æ—á–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã",
                "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–±–∞–≤–∏—Ç—å –≤ assets",
                "–°–æ–∑–¥–∞—Ç—å –¥–∏–∑–∞–π–Ω-—Ç–æ–∫–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–≤–µ—Ç–æ–≤ –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤"
            ]
        }
        
        with open("design-analysis/metadata.json", "w", encoding="utf-8") as f:
            json.dump(metadata, f, indent=2, ensure_ascii=False)
        
        # –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å –¥–∏–∑–∞–π–Ω-—Ç–æ–∫–µ–Ω–∞–º–∏
        design_tokens = {
            "colors": {
                "primary": "#007AFF",
                "secondary": "#5856D6", 
                "success": "#34C759",
                "warning": "#FF9500",
                "error": "#FF3B30",
                "background": "#07080A",
                "surface": "#1C1C1E",
                "text": "#FFFFFF",
                "textSecondary": "#8E8E93"
            },
            "typography": {
                "h1": {
                    "fontSize": "32px",
                    "fontWeight": 700,
                    "lineHeight": 1.2
                },
                "h2": {
                    "fontSize": "24px", 
                    "fontWeight": 600,
                    "lineHeight": 1.3
                },
                "body1": {
                    "fontSize": "16px",
                    "fontWeight": 400,
                    "lineHeight": 1.5
                },
                "button": {
                    "fontSize": "16px",
                    "fontWeight": 600,
                    "textTransform": "none"
                }
            },
            "spacing": {
                "xs": "4px",
                "sm": "8px", 
                "md": "16px",
                "lg": "24px",
                "xl": "32px",
                "xxl": "48px"
            },
            "borderRadius": {
                "sm": "4px",
                "md": "8px",
                "lg": "12px",
                "xl": "16px"
            }
        }
        
        with open("frontend/src/styles/design-tokens/design-tokens.json", "w", encoding="utf-8") as f:
            json.dump(design_tokens, f, indent=2, ensure_ascii=False)
        
        # –°–æ–∑–¥–∞—Ç—å CSS —Ñ–∞–π–ª —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
        css_variables = f"""
/* Design Tokens - Auto-generated from design analysis */

:root {{
  /* Colors */
  --color-primary: {design_tokens['colors']['primary']};
  --color-secondary: {design_tokens['colors']['secondary']};
  --color-success: {design_tokens['colors']['success']};
  --color-warning: {design_tokens['colors']['warning']};
  --color-error: {design_tokens['colors']['error']};
  --color-background: {design_tokens['colors']['background']};
  --color-surface: {design_tokens['colors']['surface']};
  --color-text: {design_tokens['colors']['text']};
  --color-text-secondary: {design_tokens['colors']['textSecondary']};
  
  /* Typography */
  --font-size-h1: {design_tokens['typography']['h1']['fontSize']};
  --font-weight-h1: {design_tokens['typography']['h1']['fontWeight']};
  --line-height-h1: {design_tokens['typography']['h1']['lineHeight']};
  
  --font-size-h2: {design_tokens['typography']['h2']['fontSize']};
  --font-weight-h2: {design_tokens['typography']['h2']['fontWeight']};
  --line-height-h2: {design_tokens['typography']['h2']['lineHeight']};
  
  --font-size-body: {design_tokens['typography']['body1']['fontSize']};
  --font-weight-body: {design_tokens['typography']['body1']['fontWeight']};
  --line-height-body: {design_tokens['typography']['body1']['lineHeight']};
  
  /* Spacing */
  --spacing-xs: {design_tokens['spacing']['xs']};
  --spacing-sm: {design_tokens['spacing']['sm']};
  --spacing-md: {design_tokens['spacing']['md']};
  --spacing-lg: {design_tokens['spacing']['lg']};
  --spacing-xl: {design_tokens['spacing']['xl']};
  --spacing-xxl: {design_tokens['spacing']['xxl']};
  
  /* Border Radius */
  --border-radius-sm: {design_tokens['borderRadius']['sm']};
  --border-radius-md: {design_tokens['borderRadius']['md']};
  --border-radius-lg: {design_tokens['borderRadius']['lg']};
  --border-radius-xl: {design_tokens['borderRadius']['xl']};
}}
"""
        
        with open("frontend/src/styles/design-tokens/variables.css", "w", encoding="utf-8") as f:
            f.write(css_variables)
        
        print("üìù –§–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã!")
    
    def generate_integration_plan(self, analysis: Dict[str, Any]) -> None:
        """–°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–∏–∑–∞–π–Ω–∞"""
        plan = {
            "integration_plan": {
                "phase_1": {
                    "title": "–ë–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã",
                    "tasks": [
                        "–°–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Button –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∑–∞–π–Ω–∞",
                        "–°–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Card –Ω–∞ –æ—Å–Ω–æ–≤–µ cards.png",
                        "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É",
                        "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫—É"
                    ]
                },
                "phase_2": {
                    "title": "–°—Ç—Ä–∞–Ω–∏—Ü—ã",
                    "tasks": [
                        "–°–æ–∑–¥–∞—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ –æ—Å–Ω–æ–≤–µ frame1.png",
                        "–°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ frame2.png",
                        "–°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É ERP –Ω–∞ –æ—Å–Ω–æ–≤–µ frame3.png",
                        "–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –º–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
                    ]
                },
                "phase_3": {
                    "title": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è",
                    "tasks": [
                        "–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–µ–∫—Ç",
                        "–ó–∞–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Å—Ç–∏–ª–∏ –Ω–∞ –Ω–æ–≤—ã–µ",
                        "–î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥—ã",
                        "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö"
                    ]
                }
            },
            "file_mapping": {
                "pages": [f["name"] for f in analysis["categories"]["frames"]],
                "components": [f["name"] for f in analysis["categories"]["cards"]],
                "images": [f["name"] for f in analysis["categories"]["images"]]
            }
        }
        
        with open("design-analysis/integration-plan.json", "w", encoding="utf-8") as f:
            json.dump(plan, f, indent=2, ensure_ascii=False)
        
        print("üìã –ü–ª–∞–Ω –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω!")

def main():
    analyzer = DesignAnalyzer()
    
    print("üîç –ê–Ω–∞–ª–∏–∑ –¥–∏–∑–∞–π–Ω–∞...")
    analysis = analyzer.analyze_screenshots()
    
    if not analysis:
        return
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
    print(f"  –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {analysis['total_files']}")
    print(f"  –§—Ä–µ–π–º–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü): {len(analysis['categories']['frames'])}")
    print(f"  –ö–∞—Ä—Ç–æ—á–µ–∫ (–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤): {len(analysis['categories']['cards'])}")
    print(f"  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(analysis['categories']['images'])}")
    
    print(f"\nüöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")
    analyzer.create_project_structure(analysis)
    
    print(f"\nüìã –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    analyzer.generate_integration_plan(analysis)
    
    print(f"\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫–∏:")
    print(f"  - design-analysis/ - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
    print(f"  - frontend/src/components/design/ - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
    print(f"  - frontend/src/pages/design/ - —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
    print(f"  - frontend/src/assets/design/ - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    print(f"  - frontend/src/styles/design-tokens/ - —Å—Ç–∏–ª–∏")

if __name__ == "__main__":
    main() 