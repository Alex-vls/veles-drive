#!/bin/bash

echo "üöó VELES AUTO - –õ–û–ö–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï"
echo "======================================"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
if ! command -v docker &> /dev/null; then
    log_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
if ! command -v docker-compose &> /dev/null; then
    log_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞
FREE_DISK=$(df -BG . | awk 'NR==2{print $4}' | sed 's/G//')
if [ $FREE_DISK -lt 10 ]; then
    log_warning "–ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞: ${FREE_DISK}GB (—Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 10GB)"
fi

log_success "–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã"

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
log_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker-compose down -v 2>/dev/null || true

# –û—á–∏—Å—Ç–∫–∞ Docker
log_info "–û—á–∏—Å—Ç–∫–∞ Docker..."
docker system prune -f
docker volume prune -f

# –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if [ ! -f .env ]; then
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞..."
    cp env.example .env
    log_success ".env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω"
fi

# –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
log_info "–ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker-compose up -d db redis

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
log_info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö..."
sleep 30

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL..."
for i in {1..30}; do
    if docker-compose exec -T db pg_isready -U veles_user -d veles_auto >/dev/null 2>&1; then
        log_success "PostgreSQL –≥–æ—Ç–æ–≤"
        break
    fi
    if [ $i -eq 30 ]; then
        log_error "PostgreSQL –Ω–µ –≥–æ—Ç–æ–≤ –ø–æ—Å–ª–µ 30 –ø–æ–ø—ã—Ç–æ–∫"
        exit 1
    fi
    sleep 2
done

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Redis
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ Redis..."
for i in {1..30}; do
    if docker-compose exec -T redis redis-cli ping >/dev/null 2>&1; then
        log_success "Redis –≥–æ—Ç–æ–≤"
        break
    fi
    if [ $i -eq 30 ]; then
        log_error "Redis –Ω–µ –≥–æ—Ç–æ–≤ –ø–æ—Å–ª–µ 30 –ø–æ–ø—ã—Ç–æ–∫"
        exit 1
    fi
    sleep 2
done

# –ó–∞–ø—É—Å–∫ backend
log_info "–ó–∞–ø—É—Å–∫ Django Backend..."
docker-compose up -d backend

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ backend
log_info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Backend..."
sleep 20

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ backend
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ Backend..."
for i in {1..30}; do
    if curl -f http://localhost:8000/health/ >/dev/null 2>&1; then
        log_success "Backend –≥–æ—Ç–æ–≤"
        break
    fi
    if [ $i -eq 30 ]; then
        log_error "Backend –Ω–µ –≥–æ—Ç–æ–≤ –ø–æ—Å–ª–µ 30 –ø–æ–ø—ã—Ç–æ–∫"
        exit 1
    fi
    sleep 2
done

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
log_info "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π..."
docker-compose exec -T backend python manage.py migrate

# –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
log_info "–°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..."
docker-compose exec -T backend python manage.py shell -c "
from django.contrib.auth import get_user_model
User = get_user_model()
if not User.objects.filter(username='admin').exists():
    User.objects.create_superuser('admin', 'admin@veles-auto.com', 'admin123')
    print('–°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: admin/admin123')
else:
    print('–°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
"

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö
log_info "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö..."
docker-compose exec -T backend python manage.py load_demo_data 2>/dev/null || log_warning "–î–µ–º–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"

# –ó–∞–ø—É—Å–∫ Celery
log_info "–ó–∞–ø—É—Å–∫ Celery..."
docker-compose up -d celery_worker celery_beat

# –ó–∞–ø—É—Å–∫ frontend
log_info "–ó–∞–ø—É—Å–∫ Frontend..."
docker-compose up -d frontend

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ frontend
log_info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Frontend..."
sleep 30

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ frontend
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ Frontend..."
for i in {1..30}; do
    if curl -f http://localhost:3000 >/dev/null 2>&1; then
        log_success "Frontend –≥–æ—Ç–æ–≤"
        break
    fi
    if [ $i -eq 30 ]; then
        log_error "Frontend –Ω–µ –≥–æ—Ç–æ–≤ –ø–æ—Å–ª–µ 30 –ø–æ–ø—ã—Ç–æ–∫"
        exit 1
    fi
    sleep 2
done

# –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
log_info "–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
docker-compose up -d prometheus grafana

# –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
log_info "–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker-compose ps

echo ""
echo "üéâ VELES AUTO –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù –õ–û–ö–ê–õ–¨–ù–û!"
echo "======================================"
echo ""
echo "üì± –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
echo "  - Frontend: http://localhost:3000"
echo "  - Backend API: http://localhost:8000"
echo "  - Admin Panel: http://localhost:8000/admin/"
echo "  - API Documentation: http://localhost:8000/api/docs/"
echo "  - Grafana: http://localhost:3003 (admin/veles_admin_2024)"
echo "  - Prometheus: http://localhost:9090"
echo ""
echo "üîë –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:"
echo "  - –ê–¥–º–∏–Ω: admin/admin123"
echo "  - Email: admin@veles-auto.com"
echo ""
echo "üìä ERP –ú–æ–¥—É–ª–∏:"
echo "  - –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è: http://localhost:3000/inventory"
echo "  - –ü—Ä–æ–¥–∞–∂–∏: http://localhost:3000/sales"
echo "  - –°–µ—Ä–≤–∏—Å: http://localhost:3000/service"
echo "  - –§–∏–Ω–∞–Ω—Å—ã: http://localhost:3000/finance"
echo "  - –ü—Ä–æ–µ–∫—Ç—ã: http://localhost:3000/projects"
echo ""
echo "üõ†Ô∏è –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "  - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: docker-compose down"
echo "  - –õ–æ–≥–∏: docker-compose logs -f [service]"
echo "  - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: docker-compose restart [service]"
echo "  - Shell: docker-compose exec backend python manage.py shell"
echo ""
echo "‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!" 